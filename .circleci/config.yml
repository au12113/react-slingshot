version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name my-stack
          when: on_fail
jobs:
  create_s3_bucket:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name "udacity-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides PipelineID=${CIRCLE_WORKFLOW_ID:0:7} Name=${CIRCLE_WORKFLOW_ID}
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp/txt
          paths:
            - /tmp/*
      - run:
          command: |
            aws cloudformation list-exports \
              --query "Export[?Name==\`${PipelineID}\`].Value" \
              --no-paginate --output /tmp/text
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID=${CIRCLE_WORKFLOW_ID}
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          command: |
            export OldPipelineID=$(cat /tmp/text)
            aws s3 rm "s3://${OldPipelineID}" --recursive
            aws cloudformation delete-stack --stack-name "udacity-${OldPipelineID:0:7}"
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name my-stack
      - run:
          name: generate inventory
          command: |
            echo '[all]' > inventory
            aws cloudformation list-exports \
              --query "Exports[?Name=='Udacity-PublicIp'].Value | [0]" \
              --no-paginate >> inventory
            cat inventory

  run_ansible:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2f:f4:27:a9:a8:ef:29:18:bb:b6:a4:8c:66:c3:8f:2d"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install cloudformation-cli-python-plugin
      - run:
          name: Configure server
          command: |
            cat inventory
            ansible-playbook -i inventory playbook.yml
  
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: simulate error
          command: |
            return 1
      - destroy_environment
        
workflows:
  my_workflow:
    jobs:
      - create_s3_bucket
      - get_last_deployment_id:
          requires: ['create_s3_bucket']
      - promote_to_production:
          requires: ['get_last_deployment_id']
      - clean_up_old_front_end:
          requires: ['promote_to_production']
      # - create_infrastructure
      # - run_ansible:
      #     requires: ['create_infrastructure']
      # - smoke_test:
      #     requires: ['create_infrastructure']